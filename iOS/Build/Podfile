platform :ios, '12.0'

source 'https://cdn.cocoapods.org/'
source 'https://github.com/SumSubstance/Specs.git'

use_frameworks!

target 'Unity-iPhone' do
  pod 'OneSignalXCFramework', '5.0.2'
end

target 'UnityFramework' do
  pod 'AppLovinDSPLinkedInAdapter', '1.2.0.0'
  pod 'AppLovinMediationChartboostAdapter', '9.6.0.0'
  pod 'AppLovinMediationFyberAdapter', '8.2.5.1'
  pod 'AppLovinMediationInMobiAdapter', '10.6.0.0'
  pod 'AppLovinMediationIronSourceAdapter', '7.7.0.0.0'
  pod 'AppLovinMediationMintegralAdapter', '7.5.4.0.1'
  pod 'AppLovinMediationUnityAdsAdapter', '4.9.2.1'
  pod 'AppLovinMediationVungleAdapter', '7.2.1.0'
  pod 'AppLovinMediationAdColonyAdapter', '4.9.0.0.4'
  pod 'AppLovinSDK', '12.1.0'
  pod 'AppsFlyerFramework', '6.12.2'
  pod 'IdensicMobileSDK'
  pod 'FirebaseAnalytics', '10.15.0'
  pod 'FirebaseCore', '10.15.0'
  pod 'FirebaseAuth', '10.15.0'
  pod 'FirebaseCrashlytics', '10.15.0'
  pod 'FBSDKCoreKit', '~> 16.0.1'
  pod 'FBSDKCoreKit_Basics', '~> 16.0.1'
  pod 'FBSDKGamingServicesKit', '~> 16.0.1'
  pod 'FBSDKLoginKit', '~> 16.0.1'
  pod 'FBSDKShareKit', '~> 16.0.1'
  pod 'OneSignalXCFramework', '5.0.2'
  pod 'ForterSDK', :git => 'https://bitbucket.org/forter-mobile/forter-ios-sdk.git'
  pod ‘RiskifiedBeaconXCFramework’, ‘~>1.3.2’
 
  #pod 'Protobuf'
  #pod 'UnityMediationSdk', '~> 1.0', :source => 'https://github.com/Unity-Technologies/unity-mediation-cocoapods-prod.git'
  #pod 'UnityMediationUnityAdapter', :source => 'https://github.com/Unity-Technologies/unity-mediation-cocoapods-prod.git'
end

target 'OneSignalNotificationServiceExtension' do
  pod 'OneSignalXCFramework', '5.0.2'
end

post_install do |installer|
  applicationTargets = [
    'Pods-Unity-iPhone',
  ]
  libraryTargets = [
    'Pods-UnityFramework',
  ]

  sharedLibrary = installer.aggregate_targets.find { |aggregate_target| aggregate_target.name == 'Pods-UnityFramework' }
  
  remove_duplicated_frameworks('Pods-UnityFramework', installer)
  
  installer.pods_project.targets.each do |t|
    t.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
      config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
    end
  end
end

def remove_duplicated_frameworks(app_pod_name, installer)
    test_targets = get_test_targets(app_pod_name, installer)
    puts "Detected test targets: #{test_targets}"
    puts "Removing duplicated frameworks from OTHER_LDFLAGS"
    targets = installer.aggregate_targets.select { |x| !test_targets.include?(x.name) }
    # Checks each pair of targets if they have common pods. Duplicates are removed from the first one's xcconfig.
    for i in 0..targets.size-1 do
        target = targets[i]
        remainingAppPodTargets = targets[i+1..targets.size-1].flat_map(&:pod_targets)
        target.xcconfigs.each do |config_name, config_file|
            # Removes all frameworks which exist in other pods
            remainingAppPodTargets
                .flat_map { |pod_target| get_framework_names(pod_target) }
                .each { |framework| config_file.frameworks.delete(framework) }
            # Saves updated xcconfig
            xcconfig_path = target.xcconfig_path(config_name)
            config_file.save_as(xcconfig_path)
        end
    end
end

def get_test_targets(app_pod_name, installer)
    main_target_name = app_pod_name.gsub("Pods-", "")
    installer.aggregate_targets
        .find { |x| x.name == app_pod_name }
        .user_project
        .targets
        .select { |x| x.test_target_type? }
        .flat_map { |x| ["Pods-#{x}", "Pods-#{main_target_name}-#{x}"] }
        .select { |x| installer.aggregate_targets.map(&:name).include?(x) }
        .uniq
end

def get_framework_names(pod_target)
    frameworkNames = pod_target.specs.flat_map do |spec|
        # We should take framework names from 'vendored_frameworks'.
        # If it's not defined, we use 'spec.name' instead.
        #
        # spec.name can be defined like Framework/Something - we take the first part
        # because that's what appears in OTHER_LDFLAGS.
        frameworkPaths = unless spec.attributes_hash['ios'].nil?
            then spec.attributes_hash['ios']['vendored_frameworks']
            else spec.attributes_hash['vendored_frameworks']
            end || [spec.name.split(/\//, 2).first]
        map_paths_to_filenames(frameworkPaths)
    end
    frameworkNames.uniq
end

def map_paths_to_filenames(paths)
    Array(paths).map(&:to_s).map do |filename|
        extension = File.extname filename
        File.basename filename, extension
    end
end
